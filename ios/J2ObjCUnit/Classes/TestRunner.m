//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/TestRunner.java
//

#include "HtmlGenerator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OutputDir.h"
#include "TestBehavior.h"
#include "TestException.h"
#include "TestResult.h"
#include "TestRunner.h"
#include "java/io/File.h"
#include "java/io/FileWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Method.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

@interface J2ObjCUnitTestRunner ()

+ (NSString *)treatExceptionWithJavaLangException:(JavaLangException *)e;

@end

inline id<JavaUtilMap> J2ObjCUnitTestRunner_get_testFails(void);
inline id<JavaUtilMap> J2ObjCUnitTestRunner_set_testFails(id<JavaUtilMap> value);
static id<JavaUtilMap> J2ObjCUnitTestRunner_testFails;
J2OBJC_STATIC_FIELD_OBJ(J2ObjCUnitTestRunner, testFails, id<JavaUtilMap>)

__attribute__((unused)) static NSString *J2ObjCUnitTestRunner_treatExceptionWithJavaLangException_(JavaLangException *e);

J2OBJC_INITIALIZED_DEFN(J2ObjCUnitTestRunner)

JavaUtilLoggingLogger *J2ObjCUnitTestRunner_logger;

@implementation J2ObjCUnitTestRunner

+ (JavaUtilLoggingLogger *)logger {
  return J2ObjCUnitTestRunner_logger;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  J2ObjCUnitTestRunner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)cleanResults {
  J2ObjCUnitTestRunner_cleanResults();
}

+ (NSString *)printTestsResultWithJ2ObjCUnitOutputDir:(id<J2ObjCUnitOutputDir>)outArg {
  return J2ObjCUnitTestRunner_printTestsResultWithJ2ObjCUnitOutputDir_(outArg);
}

+ (void)runWithIOSClass:(IOSClass *)clazz
                 withId:(id)context {
  J2ObjCUnitTestRunner_runWithIOSClass_withId_(clazz, context);
}

+ (NSString *)treatExceptionWithJavaLangException:(JavaLangException *)e {
  return J2ObjCUnitTestRunner_treatExceptionWithJavaLangException_(e);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, 2, 5, -1, -1 },
    { NULL, "LNSString;", 0xa, 6, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(cleanResults);
  methods[2].selector = @selector(printTestsResultWithJ2ObjCUnitOutputDir:);
  methods[3].selector = @selector(runWithIOSClass:withId:);
  methods[4].selector = @selector(treatExceptionWithJavaLangException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1c, -1, 7, -1, -1 },
    { "testFails", "LJavaUtilMap;", .constantValue.asLong = 0, 0xa, -1, 8, 9, -1 },
  };
  static const void *ptrTable[] = { "printTestsResult", "LJ2ObjCUnitOutputDir;", "LJavaLangException;", "run", "LIOSClass;LNSObject;", "(Ljava/lang/Class<+Lbr/com/mobilemind/j2objc/unit/TestBehavior;>;Ljava/lang/Object;)V", "treatException", &J2ObjCUnitTestRunner_logger, &J2ObjCUnitTestRunner_testFails, "Ljava/util/Map<Ljava/lang/Class<*>;Ljava/util/List<Lbr/com/mobilemind/j2objc/unit/TestResult;>;>;" };
  static const J2ObjcClassInfo _J2ObjCUnitTestRunner = { "TestRunner", "br.com.mobilemind.j2objc.unit", ptrTable, methods, fields, 7, 0x0, 5, 2, -1, -1, -1, -1, -1 };
  return &_J2ObjCUnitTestRunner;
}

+ (void)initialize {
  if (self == [J2ObjCUnitTestRunner class]) {
    J2ObjCUnitTestRunner_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([J2ObjCUnitTestRunner_class_() getName]);
    J2ObjCUnitTestRunner_testFails = new_JavaUtilHashMap_init();
    J2OBJC_SET_INITIALIZED(J2ObjCUnitTestRunner)
  }
}

@end

void J2ObjCUnitTestRunner_init(J2ObjCUnitTestRunner *self) {
  NSObject_init(self);
}

J2ObjCUnitTestRunner *new_J2ObjCUnitTestRunner_init() {
  J2OBJC_NEW_IMPL(J2ObjCUnitTestRunner, init)
}

J2ObjCUnitTestRunner *create_J2ObjCUnitTestRunner_init() {
  J2OBJC_CREATE_IMPL(J2ObjCUnitTestRunner, init)
}

void J2ObjCUnitTestRunner_cleanResults() {
  J2ObjCUnitTestRunner_initialize();
  [((id<JavaUtilMap>) nil_chk(J2ObjCUnitTestRunner_testFails)) clear];
}

NSString *J2ObjCUnitTestRunner_printTestsResultWithJ2ObjCUnitOutputDir_(id<J2ObjCUnitOutputDir> outArg) {
  J2ObjCUnitTestRunner_initialize();
  JavaIoFile *outputDir = new_JavaIoFile_initWithNSString_withNSString_([((id<J2ObjCUnitOutputDir>) nil_chk(outArg)) get], @"TestResult.html");
  NSString *html = [new_J2ObjCUnitHtmlGenerator_initWithJavaUtilMap_(J2ObjCUnitTestRunner_testFails) build];
  JavaIoFileWriter *writer = new_JavaIoFileWriter_initWithJavaIoFile_withBoolean_(outputDir, false);
  @try {
    (void) [writer appendWithJavaLangCharSequence:html];
    [writer flush];
  }
  @finally {
    [writer close];
  }
  return [outputDir getAbsolutePath];
}

void J2ObjCUnitTestRunner_runWithIOSClass_withId_(IOSClass *clazz, id context) {
  J2ObjCUnitTestRunner_initialize();
  id<JavaUtilList> testMethods = new_JavaUtilLinkedList_init();
  IOSObjectArray *methods = [((IOSClass *) nil_chk(clazz)) getMethods];
  id<J2ObjCUnitTestBehavior> testCase = nil;
  NSString *testMessage = nil;
  jlong testTime = 0;
  @try {
    testCase = [clazz newInstance];
    [((id<J2ObjCUnitTestBehavior>) nil_chk(testCase)) setContextWithId:context];
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(J2ObjCUnitTestRunner_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"can't create instance of " withJavaLangThrowable:e];
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"can't create instance of ", [clazz getName]));
  }
  {
    IOSObjectArray *a__ = methods;
    JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangReflectMethod * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangReflectMethod *method = *b__++;
      if ([((NSString *) nil_chk([((JavaLangReflectMethod *) nil_chk(method)) getName])) java_hasPrefix:@"test"]) {
        [testMethods addWithId:method];
      }
    }
  }
  @try {
    [((id<J2ObjCUnitTestBehavior>) nil_chk(testCase)) setUpClass];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  for (JavaLangReflectMethod * __strong testMethod in testMethods) {
    @try {
      [testCase clearMessages];
      testTime = JavaLangSystem_currentTimeMillis();
      [testCase setUp];
      (void) [((JavaLangReflectMethod *) nil_chk(testMethod)) invokeWithId:testCase withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
      [testCase tearDown];
    }
    @catch (JavaLangException *e) {
      testMessage = J2ObjCUnitTestRunner_treatExceptionWithJavaLangException_(e);
    }
    if (testMessage == nil) {
      testMessage = J2ObjCUnitTestResult_SUCCESS_MESSAGE;
    }
    testTime = JavaLangSystem_currentTimeMillis() - testTime;
    J2ObjCUnitTestResult *tr = new_J2ObjCUnitTestResult_initWithNSString_withNSString_withNSString_withLong_([clazz getName], [((JavaLangReflectMethod *) nil_chk(testMethod)) getName], testMessage, testTime);
    for (NSString * __strong msg in nil_chk([testCase getMessage])) {
      [((id<JavaUtilList>) nil_chk([tr getMessages])) addWithId:msg];
    }
    [testCase clearMessages];
    if ([((id<JavaUtilMap>) nil_chk(J2ObjCUnitTestRunner_testFails)) containsKeyWithId:clazz]) {
      [((id<JavaUtilList>) nil_chk([((id<JavaUtilMap>) nil_chk(J2ObjCUnitTestRunner_testFails)) getWithId:clazz])) addWithId:tr];
    }
    else {
      id<JavaUtilList> trs = new_JavaUtilLinkedList_init();
      [trs addWithId:tr];
      (void) [((id<JavaUtilMap>) nil_chk(J2ObjCUnitTestRunner_testFails)) putWithId:clazz withId:trs];
    }
    testTime = 0;
    testMessage = nil;
  }
  @try {
    [testCase tearDownClass];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

NSString *J2ObjCUnitTestRunner_treatExceptionWithJavaLangException_(JavaLangException *e) {
  J2ObjCUnitTestRunner_initialize();
  NSString *testMessage = nil;
  if ([[((JavaLangException *) nil_chk(e)) getCause] isKindOfClass:[J2ObjCUnitTestException class]]) {
    testMessage = [((JavaLangThrowable *) nil_chk([e getCause])) getMessage];
  }
  else if ([e getCause] != nil) {
    testMessage = JreStrcat("$C$$", [[((JavaLangThrowable *) nil_chk([e getCause])) java_getClass] getSimpleName], ':', [((JavaLangThrowable *) nil_chk([e getCause])) getMessage], @"<br/>");
    {
      IOSObjectArray *a__ = [((JavaLangThrowable *) nil_chk([e getCause])) getStackTrace];
      JavaLangStackTraceElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangStackTraceElement * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangStackTraceElement *st = *b__++;
        (void) JreStrAppendStrong(&testMessage, "$C$$I$", [((JavaLangStackTraceElement *) nil_chk(st)) getClassName], '.', [st getMethodName], @"=>Line:", [st getLineNumber], @"<br/>");
      }
    }
  }
  else {
    if ([e getCause] != nil) {
      testMessage = JreStrcat("$C$", [[e java_getClass] getSimpleName], ':', [((JavaLangThrowable *) nil_chk([e getCause])) getMessage]) == nil ? @"NULL" : JreStrcat("$$", [((JavaLangThrowable *) nil_chk([e getCause])) getMessage], @"<br/>");
    }
    else {
      testMessage = JreStrcat("$$", [[e java_getClass] getSimpleName], @": NULL <br/>");
    }
    {
      IOSObjectArray *a__ = [e getStackTrace];
      JavaLangStackTraceElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangStackTraceElement * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangStackTraceElement *st = *b__++;
        (void) JreStrAppendStrong(&testMessage, "$C$$I$", [((JavaLangStackTraceElement *) nil_chk(st)) getClassName], '.', [st getMethodName], @"=>Line:", [st getLineNumber], @"<br/>");
      }
    }
  }
  return testMessage;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(J2ObjCUnitTestRunner)
