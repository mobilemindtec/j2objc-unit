//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Assert.java
//

#include "Assert.h"
#include "ExceptionDelegate.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "TestException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Comparable.h"
#include "java/lang/Throwable.h"
#include "java/util/Comparator.h"

@interface J2ObjCUnitAssert ()

+ (jint)compareWithId:(id)obj1
               withId:(id)obj2;

@end

inline NSString *J2ObjCUnitAssert_get_DEFAULT_FAIL_MESSAGE(void);
static NSString *J2ObjCUnitAssert_DEFAULT_FAIL_MESSAGE = @"test fail";
J2OBJC_STATIC_FIELD_OBJ_FINAL(J2ObjCUnitAssert, DEFAULT_FAIL_MESSAGE, NSString *)

__attribute__((unused)) static jint J2ObjCUnitAssert_compareWithId_withId_(id obj1, id obj2);

@implementation J2ObjCUnitAssert

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  J2ObjCUnitAssert_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)fail {
  J2ObjCUnitAssert_fail();
}

+ (void)failWithNSString:(NSString *)message {
  J2ObjCUnitAssert_failWithNSString_(message);
}

+ (void)areEqualWithId:(id)obj1
                withId:(id)obj2 {
  J2ObjCUnitAssert_areEqualWithId_withId_(obj1, obj2);
}

+ (void)areEqualWithId:(id)obj1
                withId:(id)obj2
          withNSString:(NSString *)message {
  J2ObjCUnitAssert_areEqualWithId_withId_withNSString_(obj1, obj2, message);
}

+ (void)areNoEqualWithId:(id)obj1
                  withId:(id)obj2 {
  J2ObjCUnitAssert_areNoEqualWithId_withId_(obj1, obj2);
}

+ (void)areNoEqualWithId:(id)obj1
                  withId:(id)obj2
            withNSString:(NSString *)message {
  J2ObjCUnitAssert_areNoEqualWithId_withId_withNSString_(obj1, obj2, message);
}

+ (void)isFalseWithId:(id)state {
  J2ObjCUnitAssert_isFalseWithId_(state);
}

+ (void)isFalseWithId:(id)state
         withNSString:(NSString *)message {
  J2ObjCUnitAssert_isFalseWithId_withNSString_(state, message);
}

+ (void)isTrueWithBoolean:(jboolean)state {
  J2ObjCUnitAssert_isTrueWithBoolean_(state);
}

+ (void)isTrueWithId:(id)state
        withNSString:(NSString *)message {
  J2ObjCUnitAssert_isTrueWithId_withNSString_(state, message);
}

+ (void)isNullWithId:(id)obj {
  J2ObjCUnitAssert_isNullWithId_(obj);
}

+ (void)isNullWithId:(id)obj
        withNSString:(NSString *)message {
  J2ObjCUnitAssert_isNullWithId_withNSString_(obj, message);
}

+ (void)isNotNullWithId:(id)obj {
  J2ObjCUnitAssert_isNotNullWithId_(obj);
}

+ (void)isNotNullWithId:(id)obj
           withNSString:(NSString *)message {
  J2ObjCUnitAssert_isNotNullWithId_withNSString_(obj, message);
}

+ (void)isGreaterWithId:(id)obj1
                 withId:(id)obj2 {
  J2ObjCUnitAssert_isGreaterWithId_withId_(obj1, obj2);
}

+ (void)isGreaterWithId:(id)obj1
                 withId:(id)obj2
           withNSString:(NSString *)message {
  J2ObjCUnitAssert_isGreaterWithId_withId_withNSString_(obj1, obj2, message);
}

+ (void)isGreaterOrEqualWithId:(id)obj1
                        withId:(id)obj2 {
  J2ObjCUnitAssert_isGreaterOrEqualWithId_withId_(obj1, obj2);
}

+ (void)isGreaterOrEqualWithId:(id)obj1
                        withId:(id)obj2
                  withNSString:(NSString *)message {
  J2ObjCUnitAssert_isGreaterOrEqualWithId_withId_withNSString_(obj1, obj2, message);
}

+ (void)isLessWithId:(id)obj1
              withId:(id)obj2 {
  J2ObjCUnitAssert_isLessWithId_withId_(obj1, obj2);
}

+ (void)isLessWithId:(id)obj1
              withId:(id)obj2
        withNSString:(NSString *)message {
  J2ObjCUnitAssert_isLessWithId_withId_withNSString_(obj1, obj2, message);
}

+ (void)isLessOrEqualWithId:(id)obj1
                     withId:(id)obj2 {
  J2ObjCUnitAssert_isLessOrEqualWithId_withId_(obj1, obj2);
}

+ (void)isLessOrEqualWithId:(id)obj1
                     withId:(id)obj2
               withNSString:(NSString *)message {
  J2ObjCUnitAssert_isLessOrEqualWithId_withId_withNSString_(obj1, obj2, message);
}

+ (void)shouldThrowWithIOSClass:(IOSClass *)expectedException
withJ2ObjCUnitExceptionDelegate:(id<J2ObjCUnitExceptionDelegate>)operation {
  J2ObjCUnitAssert_shouldThrowWithIOSClass_withJ2ObjCUnitExceptionDelegate_(expectedException, operation);
}

+ (void)shouldThrowWithIOSClass:(IOSClass *)expectedException
                   withNSString:(NSString *)message
withJ2ObjCUnitExceptionDelegate:(id<J2ObjCUnitExceptionDelegate>)operation {
  J2ObjCUnitAssert_shouldThrowWithIOSClass_withNSString_withJ2ObjCUnitExceptionDelegate_(expectedException, message, operation);
}

+ (jint)compareWithId:(id)obj1
               withId:(id)obj2 {
  return J2ObjCUnitAssert_compareWithId_withId_(obj1, obj2);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 12, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 12, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 14, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 14, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 16, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 16, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 17, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x9, 17, 20, -1, 21, -1, -1 },
    { NULL, "I", 0xa, 22, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(fail);
  methods[2].selector = @selector(failWithNSString:);
  methods[3].selector = @selector(areEqualWithId:withId:);
  methods[4].selector = @selector(areEqualWithId:withId:withNSString:);
  methods[5].selector = @selector(areNoEqualWithId:withId:);
  methods[6].selector = @selector(areNoEqualWithId:withId:withNSString:);
  methods[7].selector = @selector(isFalseWithId:);
  methods[8].selector = @selector(isFalseWithId:withNSString:);
  methods[9].selector = @selector(isTrueWithBoolean:);
  methods[10].selector = @selector(isTrueWithId:withNSString:);
  methods[11].selector = @selector(isNullWithId:);
  methods[12].selector = @selector(isNullWithId:withNSString:);
  methods[13].selector = @selector(isNotNullWithId:);
  methods[14].selector = @selector(isNotNullWithId:withNSString:);
  methods[15].selector = @selector(isGreaterWithId:withId:);
  methods[16].selector = @selector(isGreaterWithId:withId:withNSString:);
  methods[17].selector = @selector(isGreaterOrEqualWithId:withId:);
  methods[18].selector = @selector(isGreaterOrEqualWithId:withId:withNSString:);
  methods[19].selector = @selector(isLessWithId:withId:);
  methods[20].selector = @selector(isLessWithId:withId:withNSString:);
  methods[21].selector = @selector(isLessOrEqualWithId:withId:);
  methods[22].selector = @selector(isLessOrEqualWithId:withId:withNSString:);
  methods[23].selector = @selector(shouldThrowWithIOSClass:withJ2ObjCUnitExceptionDelegate:);
  methods[24].selector = @selector(shouldThrowWithIOSClass:withNSString:withJ2ObjCUnitExceptionDelegate:);
  methods[25].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_FAIL_MESSAGE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
  };
  static const void *ptrTable[] = { "fail", "LNSString;", "areEqual", "LNSObject;LNSObject;", "LNSObject;LNSObject;LNSString;", "areNoEqual", "isFalse", "LNSObject;", "LNSObject;LNSString;", "isTrue", "Z", "isNull", "isNotNull", "isGreater", "isGreaterOrEqual", "isLess", "isLessOrEqual", "shouldThrow", "LIOSClass;LJ2ObjCUnitExceptionDelegate;", "(Ljava/lang/Class<+Ljava/lang/Throwable;>;Lbr/com/mobilemind/j2objc/unit/ExceptionDelegate;)V", "LIOSClass;LNSString;LJ2ObjCUnitExceptionDelegate;", "(Ljava/lang/Class<+Ljava/lang/Throwable;>;Ljava/lang/String;Lbr/com/mobilemind/j2objc/unit/ExceptionDelegate;)V", "compare", &J2ObjCUnitAssert_DEFAULT_FAIL_MESSAGE };
  static const J2ObjcClassInfo _J2ObjCUnitAssert = { "Assert", "br.com.mobilemind.j2objc.unit", ptrTable, methods, fields, 7, 0x1, 26, 1, -1, -1, -1, -1, -1 };
  return &_J2ObjCUnitAssert;
}

@end

void J2ObjCUnitAssert_init(J2ObjCUnitAssert *self) {
  NSObject_init(self);
}

J2ObjCUnitAssert *new_J2ObjCUnitAssert_init() {
  J2OBJC_NEW_IMPL(J2ObjCUnitAssert, init)
}

J2ObjCUnitAssert *create_J2ObjCUnitAssert_init() {
  J2OBJC_CREATE_IMPL(J2ObjCUnitAssert, init)
}

void J2ObjCUnitAssert_fail() {
  J2ObjCUnitAssert_initialize();
  J2ObjCUnitAssert_failWithNSString_(J2ObjCUnitAssert_DEFAULT_FAIL_MESSAGE);
}

void J2ObjCUnitAssert_failWithNSString_(NSString *message) {
  J2ObjCUnitAssert_initialize();
  @throw new_J2ObjCUnitTestException_initWithNSString_(message);
}

void J2ObjCUnitAssert_areEqualWithId_withId_(id obj1, id obj2) {
  J2ObjCUnitAssert_initialize();
  J2ObjCUnitAssert_areEqualWithId_withId_withNSString_(obj1, obj2, J2ObjCUnitAssert_DEFAULT_FAIL_MESSAGE);
}

void J2ObjCUnitAssert_areEqualWithId_withId_withNSString_(id obj1, id obj2, NSString *message) {
  J2ObjCUnitAssert_initialize();
  if ((obj1 == nil) || (obj2 == nil) || ![nil_chk(obj1) isEqual:obj2]) {
    NSString *text = @"expected '%s' but '%s' found: ";
    NSString *text1 = obj1 == nil ? @"null" : [obj1 description];
    NSString *text2 = obj2 == nil ? @"null" : [obj2 description];
    J2ObjCUnitAssert_failWithNSString_(JreStrcat("$$", NSString_java_formatWithNSString_withNSObjectArray_(text, [IOSObjectArray newArrayWithObjects:(id[]){ text1, text2 } count:2 type:NSObject_class_()]), message));
  }
}

void J2ObjCUnitAssert_areNoEqualWithId_withId_(id obj1, id obj2) {
  J2ObjCUnitAssert_initialize();
  J2ObjCUnitAssert_areNoEqualWithId_withId_withNSString_(obj1, obj2, J2ObjCUnitAssert_DEFAULT_FAIL_MESSAGE);
}

void J2ObjCUnitAssert_areNoEqualWithId_withId_withNSString_(id obj1, id obj2, NSString *message) {
  J2ObjCUnitAssert_initialize();
  if ((obj1 == nil) || (obj2 == nil) || [nil_chk(obj1) isEqual:obj2]) {
    NSString *text = @"expected '%s' but '%d' found: ";
    NSString *text1 = obj1 == nil ? @"null" : [obj1 description];
    NSString *text2 = obj2 == nil ? @"null" : [obj2 description];
    J2ObjCUnitAssert_failWithNSString_(JreStrcat("$$", NSString_java_formatWithNSString_withNSObjectArray_(text, [IOSObjectArray newArrayWithObjects:(id[]){ text1, text2 } count:2 type:NSObject_class_()]), message));
  }
}

void J2ObjCUnitAssert_isFalseWithId_(id state) {
  J2ObjCUnitAssert_initialize();
  J2ObjCUnitAssert_isFalseWithId_withNSString_(state, J2ObjCUnitAssert_DEFAULT_FAIL_MESSAGE);
}

void J2ObjCUnitAssert_isFalseWithId_withNSString_(id state, NSString *message) {
  J2ObjCUnitAssert_initialize();
  jboolean b = (state != nil && ([state isKindOfClass:[JavaLangBoolean class]] || [state java_getClass] == JreLoadStatic(JavaLangBoolean, TYPE))) ? [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(state, [JavaLangBoolean class]))) booleanValue] : false;
  if (b) {
    J2ObjCUnitAssert_failWithNSString_(JreStrcat("$$", @"false expected, but true found: ", message));
  }
}

void J2ObjCUnitAssert_isTrueWithBoolean_(jboolean state) {
  J2ObjCUnitAssert_initialize();
  J2ObjCUnitAssert_isTrueWithId_withNSString_(JavaLangBoolean_valueOfWithBoolean_(state), J2ObjCUnitAssert_DEFAULT_FAIL_MESSAGE);
}

void J2ObjCUnitAssert_isTrueWithId_withNSString_(id state, NSString *message) {
  J2ObjCUnitAssert_initialize();
  jboolean b = (state != nil && ([state isKindOfClass:[JavaLangBoolean class]] || [state java_getClass] == JreLoadStatic(JavaLangBoolean, TYPE))) ? [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(state, [JavaLangBoolean class]))) booleanValue] : false;
  if (!b) {
    J2ObjCUnitAssert_failWithNSString_(JreStrcat("$$", @"true expected, but false found: ", message));
  }
}

void J2ObjCUnitAssert_isNullWithId_(id obj) {
  J2ObjCUnitAssert_initialize();
  J2ObjCUnitAssert_isNullWithId_withNSString_(obj, J2ObjCUnitAssert_DEFAULT_FAIL_MESSAGE);
}

void J2ObjCUnitAssert_isNullWithId_withNSString_(id obj, NSString *message) {
  J2ObjCUnitAssert_initialize();
  if (obj != nil) {
    NSString *text = @"null expected, but '%s' found:";
    J2ObjCUnitAssert_failWithNSString_(JreStrcat("$$", NSString_java_formatWithNSString_withNSObjectArray_(text, [IOSObjectArray newArrayWithObjects:(id[]){ [obj description] } count:1 type:NSObject_class_()]), message));
  }
}

void J2ObjCUnitAssert_isNotNullWithId_(id obj) {
  J2ObjCUnitAssert_initialize();
  J2ObjCUnitAssert_isNotNullWithId_withNSString_(obj, J2ObjCUnitAssert_DEFAULT_FAIL_MESSAGE);
}

void J2ObjCUnitAssert_isNotNullWithId_withNSString_(id obj, NSString *message) {
  J2ObjCUnitAssert_initialize();
  if (obj == nil) {
    J2ObjCUnitAssert_failWithNSString_(JreStrcat("$$", @"not null expected, but null value found: ", message));
  }
}

void J2ObjCUnitAssert_isGreaterWithId_withId_(id obj1, id obj2) {
  J2ObjCUnitAssert_initialize();
  J2ObjCUnitAssert_isGreaterWithId_withId_withNSString_(obj1, obj2, J2ObjCUnitAssert_DEFAULT_FAIL_MESSAGE);
}

void J2ObjCUnitAssert_isGreaterWithId_withId_withNSString_(id obj1, id obj2, NSString *message) {
  J2ObjCUnitAssert_initialize();
  if (J2ObjCUnitAssert_compareWithId_withId_(obj1, obj2) != 1) {
    NSString *text = @"expected greater than '%s', but '%s' found: ";
    NSString *text1 = obj1 == nil ? @"null" : [obj1 description];
    NSString *text2 = obj2 == nil ? @"null" : [obj2 description];
    J2ObjCUnitAssert_failWithNSString_(JreStrcat("$$", NSString_java_formatWithNSString_withNSObjectArray_(text, [IOSObjectArray newArrayWithObjects:(id[]){ text1, text2 } count:2 type:NSObject_class_()]), message));
  }
}

void J2ObjCUnitAssert_isGreaterOrEqualWithId_withId_(id obj1, id obj2) {
  J2ObjCUnitAssert_initialize();
  J2ObjCUnitAssert_isGreaterOrEqualWithId_withId_withNSString_(obj1, obj2, J2ObjCUnitAssert_DEFAULT_FAIL_MESSAGE);
}

void J2ObjCUnitAssert_isGreaterOrEqualWithId_withId_withNSString_(id obj1, id obj2, NSString *message) {
  J2ObjCUnitAssert_initialize();
  jint value = J2ObjCUnitAssert_compareWithId_withId_(obj1, obj2);
  if (value != 0 && value != 1) {
    NSString *text = @"expected greater or equals than '%s', but '%s' found: ";
    NSString *text1 = obj1 == nil ? @"null" : [obj1 description];
    NSString *text2 = obj2 == nil ? @"null" : [obj2 description];
    J2ObjCUnitAssert_failWithNSString_(JreStrcat("$$", NSString_java_formatWithNSString_withNSObjectArray_(text, [IOSObjectArray newArrayWithObjects:(id[]){ text1, text2 } count:2 type:NSObject_class_()]), message));
  }
}

void J2ObjCUnitAssert_isLessWithId_withId_(id obj1, id obj2) {
  J2ObjCUnitAssert_initialize();
  J2ObjCUnitAssert_isLessWithId_withId_withNSString_(obj1, obj2, J2ObjCUnitAssert_DEFAULT_FAIL_MESSAGE);
}

void J2ObjCUnitAssert_isLessWithId_withId_withNSString_(id obj1, id obj2, NSString *message) {
  J2ObjCUnitAssert_initialize();
  if (J2ObjCUnitAssert_compareWithId_withId_(obj1, obj2) != -1) {
    NSString *text = @"expected less than '%s', but '%s' found: ";
    NSString *text1 = obj1 == nil ? @"null" : [obj1 description];
    NSString *text2 = obj2 == nil ? @"null" : [obj2 description];
    J2ObjCUnitAssert_failWithNSString_(JreStrcat("$$", NSString_java_formatWithNSString_withNSObjectArray_(text, [IOSObjectArray newArrayWithObjects:(id[]){ text1, text2 } count:2 type:NSObject_class_()]), message));
  }
}

void J2ObjCUnitAssert_isLessOrEqualWithId_withId_(id obj1, id obj2) {
  J2ObjCUnitAssert_initialize();
  J2ObjCUnitAssert_isLessOrEqualWithId_withId_withNSString_(obj1, obj2, J2ObjCUnitAssert_DEFAULT_FAIL_MESSAGE);
}

void J2ObjCUnitAssert_isLessOrEqualWithId_withId_withNSString_(id obj1, id obj2, NSString *message) {
  J2ObjCUnitAssert_initialize();
  jint value = J2ObjCUnitAssert_compareWithId_withId_(obj1, obj2);
  if (value != -1 && value != 0) {
    NSString *text = @"expected less or equals than '%s', but '%s' found: ";
    NSString *text1 = obj1 == nil ? @"null" : [obj1 description];
    NSString *text2 = obj2 == nil ? @"null" : [obj2 description];
    J2ObjCUnitAssert_failWithNSString_(JreStrcat("$$", NSString_java_formatWithNSString_withNSObjectArray_(text, [IOSObjectArray newArrayWithObjects:(id[]){ text1, text2 } count:2 type:NSObject_class_()]), message));
  }
}

void J2ObjCUnitAssert_shouldThrowWithIOSClass_withJ2ObjCUnitExceptionDelegate_(IOSClass *expectedException, id<J2ObjCUnitExceptionDelegate> operation) {
  J2ObjCUnitAssert_initialize();
  J2ObjCUnitAssert_shouldThrowWithIOSClass_withNSString_withJ2ObjCUnitExceptionDelegate_(expectedException, nil, operation);
}

void J2ObjCUnitAssert_shouldThrowWithIOSClass_withNSString_withJ2ObjCUnitExceptionDelegate_(IOSClass *expectedException, NSString *message, id<J2ObjCUnitExceptionDelegate> operation) {
  J2ObjCUnitAssert_initialize();
  @try {
    [((id<J2ObjCUnitExceptionDelegate>) nil_chk(operation)) execute];
  }
  @catch (JavaLangThrowable *e) {
    if ([e java_getClass] == expectedException) {
      return;
    }
    if (message == nil) {
      message = @"expected exception %s but found exception %s";
      J2ObjCUnitAssert_failWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(message, [IOSObjectArray newArrayWithObjects:(id[]){ [((IOSClass *) nil_chk(expectedException)) getName], [[e java_getClass] getName] } count:2 type:NSObject_class_()]));
    }
    else {
      J2ObjCUnitAssert_failWithNSString_(message);
    }
  }
  if (message == nil) {
    J2ObjCUnitAssert_failWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"expected exception %s", [IOSObjectArray newArrayWithObjects:(id[]){ [((IOSClass *) nil_chk(expectedException)) getName] } count:1 type:NSObject_class_()]));
  }
  else {
    J2ObjCUnitAssert_failWithNSString_(message);
  }
}

jint J2ObjCUnitAssert_compareWithId_withId_(id obj1, id obj2) {
  J2ObjCUnitAssert_initialize();
  if ([JavaUtilComparator_class_() isInstance:obj1] && [JavaUtilComparator_class_() isInstance:obj2]) {
    return [((id<JavaUtilComparator>) nil_chk(((id<JavaUtilComparator>) cast_check(obj1, JavaUtilComparator_class_())))) compareWithId:obj1 withId:obj2];
  }
  if ([JavaLangComparable_class_() isInstance:obj1] && [JavaLangComparable_class_() isInstance:obj2]) {
    return [((id<JavaLangComparable>) nil_chk(((id<JavaLangComparable>) cast_check(obj1, JavaLangComparable_class_())))) compareToWithId:obj2];
  }
  @throw new_J2ObjCUnitTestException_initWithNSString_(@"values can not be compared");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(J2ObjCUnitAssert)
